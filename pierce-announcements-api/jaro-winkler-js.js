// Generated by CoffeeScript 1.12.7
(function() {
  String.prototype.distance = function(reference) {
    var distance;
    distance = function(string1, string2) {
      var ch, i, j, jaro, k, l, len, len1, len2, m, matchWindow, n, numMatches, prefix, ref, ref1, ref2, string1Matches, string2Matches, transpositions, windowEnd, windowStart;
      if (string1.length > string2.length) {
        ref = [string2, string1], string1 = ref[0], string2 = ref[1];
      }
      matchWindow = ~~Math.max(0, string2.length / 2 - 1);
      string1Matches = [];
      string2Matches = [];
      for (i = k = 0, len = string1.length; k < len; i = ++k) {
        ch = string1[i];
        windowStart = Math.max(0, i - matchWindow);
        windowEnd = Math.min(i + matchWindow + 1, string2.length);
        for (j = l = ref1 = windowStart, ref2 = windowEnd; ref1 <= ref2 ? l < ref2 : l > ref2; j = ref1 <= ref2 ? ++l : --l) {
          if ((string2Matches[j] == null) && ch === string2[j]) {
            string1Matches[i] = ch;
            string2Matches[j] = string2[j];
            break;
          }
        }
      }
      string1Matches = string1Matches.join("");
      string2Matches = string2Matches.join("");
      numMatches = string1Matches.length;
      if (!numMatches) {
        return 0;
      }
      transpositions = 0;
      for (i = m = 0, len1 = string1Matches.length; m < len1; i = ++m) {
        ch = string1Matches[i];
        if (ch !== string2Matches[i]) {
          transpositions++;
        }
      }
      prefix = 0;
      for (i = n = 0, len2 = string1.length; n < len2; i = ++n) {
        ch = string1[i];
        if (ch === string2[i]) {
          prefix++;
        } else {
          break;
        }
      }
      jaro = ((numMatches / string1.length) + (numMatches / string2.length) + (numMatches - ~~(transpositions / 2)) / numMatches) / 3.0;
      return jaro + Math.min(prefix, 4) * 0.1 * (1 - jaro);
    };
    return distance(this, reference);
  };

}).call(this);
